#!/usr/bin/env bash
####################################################################################################
# Copyright Â© 2023 Bahman Movaqar
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
####################################################################################################

set -o pipefail

test_suite_name=$(basename $BASH_SOURCE)
source ${root_dir}tests/lib.sh

####################################################################################################
# when the variable value is a member of the enum
####################################################################################################

function when_variable_value_is_a_member_of_the_enum {
  local test_case_name=${FUNCNAME[0]}
  local actual_value_filename=${test_case_name}.actual.log
  bmakelib.test.cat <<EOF > Makefile
SHELL := /usr/bin/env bash
include \$(bmakelib.ROOT)/bmakelib.mk

define-enum : bmakelib.enum.define( ENUM1/v1,v2 )
include define-enum

VAR1 ?=

.PHONY : echo-backing-var
verify-member : bmakelib.enum.error-unless-member( ENUM1,VAR1 )
	@echo \$(VAR1)
EOF

  make VAR1=v1 verify-member > $actual_value_filename 2>&1

  local expexted_pattern_filename=${test_case_name}.expected.pattern
  bmakelib.test.cat <<EOF > $expexted_pattern_filename
make.+Entering.+
v1
make.+Leaving.+
EOF

  bmakelib.test.assert_matches $test_case_name $actual_value_filename $expexted_pattern_filename \
    || return 1
}

####################################################################################################
# when the variable value is a member of the enum
####################################################################################################

function when_variable_value_is_not_a_member_of_the_enum {
  local test_case_name=${FUNCNAME[0]}
  local actual_value_filename=${test_case_name}.actual.log
  bmakelib.test.cat <<EOF > Makefile
SHELL := /usr/bin/env bash
include \$(bmakelib.ROOT)/bmakelib.mk

define-enum : bmakelib.enum.define( ENUM1/v1,v2 )
include define-enum

VAR1 ?=

.PHONY : echo-backing-var
verify-member : bmakelib.enum.error-unless-member( ENUM1,VAR1 )
	@echo \$(VAR1)
EOF

  make VAR1=not-exists verify-member > $actual_value_filename 2>&1

  local expexted_pattern_filename=${test_case_name}.expected.pattern
  bmakelib.test.cat <<EOF > $expexted_pattern_filename
make.+Entering.+
.+\*\*\* 'not-exists' is not a member of enum 'ENUM1'.  Stop.
make.+Leaving.+
EOF

  bmakelib.test.assert_matches $test_case_name $actual_value_filename $expexted_pattern_filename \
    || return 1
}

####################################################################################################

test_cases=( when_variable_value_is_a_member_of_the_enum
             when_variable_value_is_not_a_member_of_the_enum )

test_case_name=''	# mutated in the for loop
test_suite_status=0	# mutated in the for loop
for test_case in ${test_cases[@]}; do
  test_case_name=$test_case
  if ! bmakelib.test.run_test_case $test_case; then
    test_suite_status=1
  fi
done

exit $test_suite_status
