#!/usr/bin/env bash
####################################################################################################
# Copyright Â© 2023 Bahman Movaqar
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
####################################################################################################

set -o pipefail

test_suite_name=$(basename $BASH_SOURCE)
source ${root_dir}tests/lib.sh

####################################################################################################
# when a variable is blank, make should exit with an error
####################################################################################################

function single_var_exit_when_blank {
  local test_case_name=${FUNCNAME[0]}
  local actual_value_filename=${test_case_name}.actual.log
  bmakelib.test.cat <<EOF > Makefile
include $( perl -E 'print $ENV{"bmakelib.ROOT"}' )/bmakelib.mk

.PHONY : echo-var1

echo-var1 : bmakelib.error-if-blank( VAR1 )
echo-var1 :
	echo \$(VAR1)
EOF

  make echo-var1 > $actual_value_filename 2>&1

  local expected_pattern_filename=${test_case_name}.expected.pattern
  bmakelib.test.cat <<EOF > $expected_pattern_filename
make.+Entering.+
.+\*\*\*\s+Provide a value for 'VAR1'.\s+Stop.
make.+Leaving.+
EOF

  bmakelib.test.assert_matches $test_case_name $actual_value_filename $expected_pattern_filename \
    || return 1
}

####################################################################################################
# given more than one variable, it should exit on the first blank one
####################################################################################################

function multi_var_exist_on_first_nonblank {
  local test_case_name=${FUNCNAME[0]}
  local actual_value_filename=${test_case_name}.actual.log
  bmakelib.test.cat <<EOF > Makefile
include $( perl -E 'print $ENV{"bmakelib.ROOT"}' )/bmakelib.mk

.PHONY : echo-vars

echo-vars : bmakelib.error-if-blank( VAR1 VAR2 VAR3 )
echo-vars :
	echo \$(VAR1) \$(VAR2) \$(VAR3)
EOF

  make VAR1=var1-value echo-vars > $actual_value_filename 2>&1

  local expected_pattern_filename=${test_case_name}.expected.pattern
  bmakelib.test.cat <<EOF > $expected_pattern_filename
make.+Entering.+
.+\*\*\*\s+Provide a value for 'VAR2'.\s+Stop.
make.+Leaving.+
EOF

  bmakelib.test.assert_matches $test_case_name $actual_value_filename $expected_pattern_filename \
    || return 1
}

####################################################################################################
# ok when all the variables are non-blank
####################################################################################################

function ok_all_nonblank_vars {
  local test_case_name=${FUNCNAME[0]}
  local actual_value_filename=${test_case_name}.actual.log
  bmakelib.test.cat <<EOF > Makefile
include $( perl -E 'print $ENV{"bmakelib.ROOT"}' )/bmakelib.mk

.PHONY : echo-vars

echo-vars : bmakelib.error-if-blank( VAR1 VAR2 )
echo-vars : bmakelib.error-if-blank( VAR3 )
echo-vars :
	@echo \$(VAR1) \$(VAR2) \$(VAR3)
EOF

  make VAR1=v1 VAR2=v2 VAR3=v3 echo-vars > $actual_value_filename 2>&1

  local expected_pattern_filename=${test_case_name}.expected.pattern
  bmakelib.test.cat <<EOF > $expected_pattern_filename
make.+Entering.+
v1 v2 v3
make.+Leaving.+
EOF

  bmakelib.test.assert_matches $test_case_name $actual_value_filename $expected_pattern_filename \
    || return 1
}

####################################################################################################

test_cases=( single_var_exit_when_blank \
               multi_var_exist_on_first_nonblank \
               ok_all_nonblank_vars )

test_case_name=''	# mutated in the for loop
test_suite_status=0	# mutated in the for loop
for test_case in ${test_cases[@]}; do
  test_case_name=$test_case
  if ! bmakelib.test.run_test_case $test_case; then
    test_suite_status=1
  fi
done

exit $test_suite_status
