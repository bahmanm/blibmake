#!/usr/bin/env bash

set -o errexit
set -o pipefail

####################################################################################################
# echo.error MSG
####################################################################################################
function echo.error {
  echo "$@" >&2
}

####################################################################################################
# pushd DIR
####################################################################################################
function pushd {
  command pushd "$@" > /dev/null
}

####################################################################################################
# popd DIR
####################################################################################################
function popd {
  command popd "$@" > /dev/null
}

####################################################################################################
# run_a_test TEST
#
# Globals:
#   target_dir
####################################################################################################
function run_a_test {
  local test_file="${root_dir}${1}"
  local test_name="$(basename $test_file)"
  local test_dir="${target_dir}/${test_name}"

  echo "Running ${test_name} in ${test_dir}..."
  mkdir -p $test_dir || echo.error "runner: Could not create ${test_dir}."
  cp $test_file $test_dir || echo.error  "runner: Could not find ${test_file}."
  pushd $test_dir
  if ! ./${test_name}; then
    echo.error "ERROR: ${test_name} failed."
    popd
    return 1
  fi
  popd
}

####################################################################################################
# run_all_tests
#
# Globals:
#   tests_to_run
#
# Output:
#   PASSED_TEST_COUNT FAILED_TEST_COUNT
####################################################################################################
function run_all_tests {
  local failed_count=0
  local ok_count=0
  for t in $tests_to_run; do
    if run_a_test $t; then
      ok_count=$(( $ok_count + 1 ))
    else
      failed_count=$(( $failed_count + 1 ))
    fi
  done

  echo "✅ $ok_count test(s) passed."
  echo "❌ $failed_count test(s) failed."
  [[ $failed_count -eq 0 ]] || return 1
}

# list of absolute paths
tests_to_run=${RUNNER_TESTS}
if [[ -z "$tests_to_run" ]]; then
  echo.error 'runner: No tests to run specificed - set the value of RUNNER_TESTS.'
  exit 1
fi

# absolute path
target_dir=${RUNNER_DIR}
if [[ -z "$target_dir" ]]; then
  echo.error 'runner: No target (temp) directory sepcified - set the value of RUNNER_DIR.'
  exit 1
fi

root_dir=${RUNNER_ROOT}
if [[ -z "$root_dir" ]]; then
  echo.error 'runner: No bmakelib root directory sepcified - set the value of RUNNER_ROOT.'
  exit 1
fi


run_all_tests
